#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <string.h>

#define GAME_PACKET_IDENTIFIER "GAME_PACKET_IDENTIFIER"

void analyze_payload(const u_char *payload, int payload_length) {
    // SSH 패킷인지 확인
    if (payload[0] == 'S' && payload[1] == 'S' && payload[2] == 'H' && payload[3] == '-') {
        printf("Payload indicates SSH packet.\n");
    }
    // RDP 패킷인지 확인
    else if (payload_length >= 5 && memcmp(payload, "\x03\x00\x00\x13\x0e", 5) == 0) {
        printf("Payload indicates RDP packet.\n");
    }
    // HTTP 패킷인지 확인
    else if (strstr((const char *)payload, "GET ") != NULL || strstr((const char *)payload, "POST ") != NULL || strstr((const char *)payload, "HTTP/1.") != NULL) {
        printf("Payload indicates HTTP packet.\n");
    }
    // 게임 패킷인지 확인
    else if (strstr((const char *)payload, GAME_PACKET_IDENTIFIER) != NULL) {
        printf("Payload indicates game packet.\n");
    }
    // SSH 패킷인지 추가로 확인
    else if (payload_length > 4 && payload[0] == 0x00 && payload[1] == 0x00 && payload[2] == 0x00 && payload[3] == 0x47) {
        printf("Payload indicates SSH packet (alternate detection).\n");
    }
    // 패킷 유형을 구분할 수 없음
    else {
        printf("Payload does not match known packet types.\n");
    }
}

void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    // IP 헤더, TCP 헤더 포인터 선언
    const struct ip *ip_header;
    const struct tcphdr *tcp_header;
    int ip_header_length, tcp_header_length, payload_length;
    const u_char *payload;

    // IP 헤더 분석
    ip_header = (struct ip*)(packet + sizeof(struct ether_header));
    ip_header_length = ip_header->ip_hl * 4;

    if (ip_header->ip_p == IPPROTO_TCP) {
        // TCP 헤더 분석
        tcp_header = (struct tcphdr*)(packet + sizeof(struct ether_header) + ip_header_length);
        tcp_header_length = (tcp_header->th_off) * 4;

        // 페이로드 분석
        payload = packet + sizeof(struct ether_header) + ip_header_length + tcp_header_length;
        payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + tcp_header_length);

        // 필요한 정보 출력
        printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
        printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));

        // 페이로드 출력
        if (payload_length > 0) {
            printf("Payload (%d bytes):\n", payload_length);
            for (int i = 0; i < payload_length; i++) {
                printf("%02x ", payload[i]);
                if ((i + 1) % 16 == 0) printf("\n");
            }
            printf("\n");

            // 페이로드 분석
            analyze_payload(payload, payload_length);
        } else {
            printf("No Payload\n");
        }
    }
}

int main(int argc, char *argv[]) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp";
    bpf_u_int32 net;

    // pcap 파일 경로 확인
    if (argc != 2) {
        fprintf(stderr, "Usage: %s pcap_file\n", argv[0]);
        return 1;
    }

    // pcap 파일 열기
    handle = pcap_open_offline(argv[1], errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Error opening pcap file: %s\n", errbuf);
        return 2;
    }

    // 필터 표현식 컴파일
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "%s 필터 파싱 실패: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 필터 설정
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "%s 필터 설치 실패: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 패킷 캡처 시작 - 각 패킷에 대해 패킷 핸들러 콜백 함수를 호출하는 무한 루프
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_freecode(&fp);
    pcap_close(handle);

    printf("캡처 완료.\n");
    return 0;
}
