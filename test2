#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>

// Ethernet 헤더 출력 함수
void print_ethernet_header(const struct ether_header *eth_header) {
    // 송신 및 수신 MAC 주소 출력
    printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
           eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
           eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
           eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
           eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);
}

// IP 헤더 출력 함수
void print_ip_header(const struct ip *ip_header) {
    // 송신 및 수신 IP 주소 출력
    printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
}

// TCP 헤더 출력 함수
void print_tcp_header(const struct tcphdr *tcp_header) {
    // 송신 및 수신 포트 출력
    printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));
}

// 패킷 페이로드 분석 및 프로토콜 반환 함수
const char *analyze_packet(const u_char *payload, int payload_length) {
    // HTTPS 패턴 검색
    if (payload_length >= 12 && memcmp(payload, "\x16\x03", 2) == 0 && memcmp(payload + 5, "\x01", 1) == 0 && memcmp(payload + 9, "\x03", 1) == 0) {
        return "HTTPS";
    }
    // SSH 패턴 검색
    else if (payload_length >= 3 && memcmp(payload, "SSH", 3) == 0) {
        return "SSH";
    }
    // RDP 패턴 검색
    else if (payload_length >= 3 && memcmp(payload, "\x03\x00\x00", 3) == 0) {
        return "RDP";
    }
    // 어떤 패턴도 발견되지 않았을 때
    return "Unknown";
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    const struct ether_header *eth_header;
    const struct ip *ip_header;
    const struct tcphdr *tcp_header;
    const u_char *payload;
    int payload_length;

    // Ethernet 헤더 추출
    eth_header = (struct ether_header *)packet;

    // IP 헤더 추출
    ip_header = (struct ip *)(packet + sizeof(struct ether_header));

    // TCP 헤더 추출
    tcp_header = (struct tcphdr *)(packet + sizeof(struct ether_header) + ip_header->ip_hl * 4);

    // Ethernet 헤더 출력
    print_ethernet_header(eth_header);
    // IP 헤더 출력
    print_ip_header(ip_header);
    // TCP 헤더 출력
    print_tcp_header(tcp_header);

    // 페이로드 시작 위치 및 길이 계산
    payload = packet + sizeof(struct ether_header) + ip_header->ip_hl * 4 + tcp_header->th_off * 4;
    payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header->ip_hl * 4 + tcp_header->th_off * 4);

    // 패킷 분석 및 검출된 프로토콜 출력
    const char *protocol = analyze_packet(payload, payload_length);
    printf("Detected Protocol: %s\n", protocol);
}

int main(int argc, char *argv[]) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];

    // 명령줄 인자로 pcapng 파일을 받아서 처리
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pcapng file>\n", argv[0]);
        return 1;
    }

    // 파일 열기
    handle = pcap_open_offline(argv[1], errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open file %s: %s\n", argv[1], errbuf);
        return 2;
    }

    // 패킷 캡처 시작 - 무한 루프로 각 패킷마다 packet_handler 콜백 함수 호출
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_close(handle);

    printf("Analysis complete.\n");
    return 0;
}

